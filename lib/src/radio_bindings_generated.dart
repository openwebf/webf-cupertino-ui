// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by webf codegen --flutter-package-src=/Users/andycall/workspace/webf-enterprise-2/webf_cupertino_ui --framework=react <distPath>
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: implementation_imports
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: prefer_void_to_null
import 'package:webf/webf.dart';
abstract class FlutterCupertinoRadioBindings extends WidgetElement {
  FlutterCupertinoRadioBindings(super.context);
  String? get val;
  set val(value);
  String? get groupValue;
  set groupValue(value);
  bool get useCheckmarkStyle;
  set useCheckmarkStyle(value);
  bool get disabled;
  set disabled(value);
  String? get activeColor;
  set activeColor(value);
  String? get focusColor;
  set focusColor(value);
  @override
  void initializeAttributes(Map<String, ElementAttributeProperty> attributes) {
    super.initializeAttributes(attributes);
    attributes['val'] = ElementAttributeProperty(
      getter: () => val.toString(),
      setter: (value) => val = value
    );
    attributes['group-value'] = ElementAttributeProperty(
      getter: () => groupValue.toString(),
      setter: (value) => groupValue = value
    );
    attributes['use-checkmark-style'] = ElementAttributeProperty(
      getter: () => useCheckmarkStyle.toString(),
      setter: (value) => useCheckmarkStyle = value == 'true' || value == ''
    );
    attributes['disabled'] = ElementAttributeProperty(
      getter: () => disabled.toString(),
      setter: (value) => disabled = value == 'true' || value == ''
    );
    attributes['active-color'] = ElementAttributeProperty(
      getter: () => activeColor.toString(),
      setter: (value) => activeColor = value
    );
    attributes['focus-color'] = ElementAttributeProperty(
      getter: () => focusColor.toString(),
      setter: (value) => focusColor = value
    );
  }
  static StaticDefinedBindingPropertyMap flutterCupertinoRadioProperties = {
    'val': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterCupertinoRadioBindings>(element).val,
      setter: (element, value) =>
      castToType<FlutterCupertinoRadioBindings>(element).val = value,
    ),
    'groupValue': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterCupertinoRadioBindings>(element).groupValue,
      setter: (element, value) =>
      castToType<FlutterCupertinoRadioBindings>(element).groupValue = value,
    ),
    'useCheckmarkStyle': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterCupertinoRadioBindings>(element).useCheckmarkStyle,
      setter: (element, value) =>
      castToType<FlutterCupertinoRadioBindings>(element).useCheckmarkStyle = value,
    ),
    'disabled': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterCupertinoRadioBindings>(element).disabled,
      setter: (element, value) =>
      castToType<FlutterCupertinoRadioBindings>(element).disabled = value,
    ),
    'activeColor': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterCupertinoRadioBindings>(element).activeColor,
      setter: (element, value) =>
      castToType<FlutterCupertinoRadioBindings>(element).activeColor = value,
    ),
    'focusColor': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterCupertinoRadioBindings>(element).focusColor,
      setter: (element, value) =>
      castToType<FlutterCupertinoRadioBindings>(element).focusColor = value,
    ),
  };
  @override
  List<StaticDefinedBindingPropertyMap> get properties => [
    ...super.properties,
    flutterCupertinoRadioProperties,
  ];
}